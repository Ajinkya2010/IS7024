// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Accident_Type;
//
//    var accident = Accident.FromJson(jsonString);

namespace Accident_Type
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Accident
    {
        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("neighborhood")]
        public Neighborhood Neighborhood { get; set; }

        [JsonProperty("accidentDate")]
        public DateTimeOffset AccidentDate { get; set; }

        [JsonProperty("latitude")]
        public string Latitude { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }

        [JsonProperty("accidentType")]
        public AccidentType AccidentType { get; set; }
    }

    public enum AccidentType { Fire, Traffic };

    public enum Neighborhood { Downtown };

    public partial class Accident
    {
        public static Accident[] FromJson(string json) => JsonConvert.DeserializeObject<Accident[]>(json, Accident_Type.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Accident[] self) => JsonConvert.SerializeObject(self, Accident_Type.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AccidentTypeConverter.Singleton,
                NeighborhoodConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AccidentTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AccidentType) || t == typeof(AccidentType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "fire":
                    return AccidentType.Fire;
                case "traffic":
                    return AccidentType.Traffic;
            }
            throw new Exception("Cannot unmarshal type AccidentType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AccidentType)untypedValue;
            switch (value)
            {
                case AccidentType.Fire:
                    serializer.Serialize(writer, "fire");
                    return;
                case AccidentType.Traffic:
                    serializer.Serialize(writer, "traffic");
                    return;
            }
            throw new Exception("Cannot marshal type AccidentType");
        }

        public static readonly AccidentTypeConverter Singleton = new AccidentTypeConverter();
    }

    internal class NeighborhoodConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Neighborhood) || t == typeof(Neighborhood?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "DOWNTOWN")
            {
                return Neighborhood.Downtown;
            }
            throw new Exception("Cannot unmarshal type Neighborhood");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Neighborhood)untypedValue;
            if (value == Neighborhood.Downtown)
            {
                serializer.Serialize(writer, "DOWNTOWN");
                return;
            }
            throw new Exception("Cannot marshal type Neighborhood");
        }

        public static readonly NeighborhoodConverter Singleton = new NeighborhoodConverter();
    }
}
